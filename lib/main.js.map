{"version":3,"sources":["src/main.js"],"names":["styles","init","width","height","backgroundColor","position","top","left","mixBlendMode","zIndex","pointerEvents","transition","normal","visibility","opacity","dark","DarkmodeHook","maskDOMNode","document","createElement","imgs","getElementsByTagName","maskDOMNodeID","Math","floor","random","key","style","Array","prototype","forEach","call","img","filter","id","window","getComputedStyle","documentElement","background","body","appendChild","_installStyle","_invertImages","mask","getElementById","parentElement","removeChild"],"mappings":";AAkFkD,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAlFlD,IAAMA,EAAS,CACbC,KAAM,CACJC,MAAO,QACPC,OAAQ,QACRC,gBAAiB,OACjBC,SAAU,QACVC,IAAK,IACLC,KAAM,IACNC,aAAc,aACdC,OAAQ,KACRC,cAAe,OACfC,WAAY,2DAEdC,OAAQ,CACNC,WAAY,SACZC,QAAS,KAEXC,KAAM,CACJF,WAAY,UACZC,QAAS,MAIQE,EA2D6B,WA1DlC,SAAA,IAAA,EAAA,KAAA,GACPC,KAAAA,YAAcC,SAASC,cAAc,OACrCC,KAAAA,KAAOF,SAASG,qBAAqB,OACrCC,KAAAA,cAAmBC,GAAAA,OAAAA,KAAKC,MAAsB,IAAhBD,KAAKE,WACnCxB,KAAAA,OAsDyC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,gBApDlCD,MAAAA,SAAAA,GACP,IAAA,IAAI0B,KAAO1B,EACTiB,KAAAA,YAAYU,MAAMD,GAAO1B,EAAO0B,KAkDO,CAAA,IAAA,gBA9ChC,MAAA,WAEdE,MAAMC,UAAUC,QAAQC,KAAK,KAAKX,KADhB,SAAAY,GAAOA,OAAAA,EAAIL,MAAMM,OAA8B,iBAArBD,EAAIL,MAAMM,OAA4B,eAAiB,OA6CrD,CAAA,IAAA,OAzCzC,MAAA,WAEAhB,KAAAA,YAAYiB,GAAK,KAAKZ,cAG+C,iBAAtEa,OAAOC,iBAAiBlB,SAASmB,iBAAiBjC,iBAA4G,qBAAtE+B,OAAOC,iBAAiBlB,SAASmB,iBAAiBjC,kBAC5Ic,SAASmB,gBAAgBV,MAAMW,WAAa,gBAEiB,iBAA3DH,OAAOC,iBAAiBlB,SAASqB,MAAMnC,iBAAiG,qBAA3D+B,OAAOC,iBAAiBlB,SAASqB,MAAMnC,kBACtHc,SAASqB,KAAKZ,MAAMW,WAAa,gBAInCpB,SAASqB,KAAKC,YAAY,KAAKvB,aAG1BwB,KAAAA,cAAczC,EAAOC,MACrBwC,KAAAA,cAAczC,EAAOY,UAwBoB,CAAA,IAAA,SArBvC,MAAA,WACF6B,KAAAA,cAAczC,EAAOe,MAGrB2B,KAAAA,kBAiByC,CAAA,IAAA,UAdtC,MAAA,WACHD,KAAAA,cAAczC,EAAOY,QACrB8B,KAAAA,kBAYyC,CAAA,IAAA,UATtC,MAAA,WACFC,IAAAA,EAAOzB,SAAS0B,eAAe,KAAKtB,eACtCqB,GACaA,EAAKE,cACbC,YAAYH,OAKyB,EAAA,GAAA,QAAA,QAAA,EAAlDR,SAAWA,OAAM,aAAmBnB","file":"main.js","sourceRoot":"../src","sourcesContent":["const styles = {\n  init: {\n    width: '100vw',\n    height: '100vh',\n    backgroundColor: '#fff',\n    position: 'fixed',\n    top: '0',\n    left: '0',\n    mixBlendMode: 'difference',\n    zIndex: '10',\n    pointerEvents: 'none',\n    transition: 'visibility 300ms ease-in-out, opacity 300ms ease-in-out',\n  },\n  normal: {\n    visibility: \"hidden\",\n    opacity: '0'\n  },\n  dark: {\n    visibility: \"visible\",\n    opacity: '1'\n  },\n}\n\nexport default class DarkmodeHook {\n  constructor() {\n    this.maskDOMNode = document.createElement('div') // mask遮罩\n    this.imgs = document.getElementsByTagName('img') // 整个页面的图片\n    this.maskDOMNodeID = `${Math.floor(Math.random() * 100000)}` // 随机生成的 mask id\n    this.init()\n  }\n  _installStyle(styles) {\n    for (let key in styles) {\n      this.maskDOMNode.style[key] = styles[key]\n    }\n  }\n\n  _invertImages() {\n    const invertImg = img => img.style.filter = img.style.filter !== \"invert(100%)\" ? \"invert(100%)\" : \"\"\n    Array.prototype.forEach.call(this.imgs, invertImg)\n  }\n  \n  init() {\n    // 设置遮罩的 id\n    this.maskDOMNode.id = this.maskDOMNodeID\n\n    // fix chrome bug\n    if (window.getComputedStyle(document.documentElement).backgroundColor === 'rgb(0, 0, 0)' || window.getComputedStyle(document.documentElement).backgroundColor === 'rgba(0, 0, 0, 0)') {\n      document.documentElement.style.background = 'rgb(0, 0, 0)'\n    }\n    if (window.getComputedStyle(document.body).backgroundColor === 'rgb(0, 0, 0)' || window.getComputedStyle(document.body).backgroundColor === 'rgba(0, 0, 0, 0)') {\n      document.body.style.background = 'rgb(0, 0, 0)'\n    }\n\n    // mask 插入 body\n    document.body.appendChild(this.maskDOMNode)\n\n    // mask 样式初始化\n    this._installStyle(styles.init)\n    this._installStyle(styles.normal)\n  }\n\n  turnOn() {\n    this._installStyle(styles.dark)\n    // invert the images color\n    // so that they can render with the right color\n    this._invertImages()\n  }\n\n  turnOff() {\n    this._installStyle(styles.normal)\n    this._invertImages()\n  }\n\n  destroy() {\n    const mask = document.getElementById(this.maskDOMNodeID)\n    if (mask) {\n      const parent = mask.parentElement\n      parent.removeChild(mask)\n    }\n  }\n}\n\nwindow && (window['DarkmodeHook'] = DarkmodeHook) // mount on the global"]}